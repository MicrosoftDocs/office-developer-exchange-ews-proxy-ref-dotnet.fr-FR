<Type Name="SubscribeType" FullName="ExchangeWebServices.SubscribeType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1cf8efecccc7ccb81b2a728a8011c7491eade2be" />
    <Meta Name="ms.sourcegitcommit" Value="09f9993d313d1e3ec77e21f70573b3fced6eea2e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20604192" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SubscribeType : ExchangeWebServices.BaseRequestType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SubscribeType extends ExchangeWebServices.BaseRequestType" />
  <TypeSignature Language="DocId" Value="T:ExchangeWebServices.SubscribeType" />
  <TypeSignature Language="VB.NET" Value="Public Class SubscribeType&#xA;Inherits BaseRequestType" />
  <TypeSignature Language="C++ CLI" Value="public ref class SubscribeType : ExchangeWebServices::BaseRequestType" />
  <AssemblyInfo>
    <AssemblyName>EWS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>ExchangeWebServices.BaseRequestType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("code")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlType(Namespace="http://schemas.microsoft.com/exchange/services/2006/messages")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="dbe03-101">Le <see cref="T:ExchangeWebServices.SubscribeType" /> classe représente une demande de s’abonner à des notifications d’événements sur les boîtes aux lettres dans la base de données Exchange.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dbe03-101">The <see cref="T:ExchangeWebServices.SubscribeType" /> class represents a request to subscribe to notifications of events on mailboxes in the Exchange database.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="dbe03-102">
        <para>Le <see cref="T:ExchangeWebServices.SubscribeType" /> classe est utilisée pour les types de notification push et d’extraction.</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="dbe03-102">
          <para>The <see cref="T:ExchangeWebServices.SubscribeType" /> class is used for both push and pull notification types.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="dbe03-103">Exemple de code <para>suivantes vous montre comment créer un abonnement de notification qui surveille la boîte de réception et un autre dossier. Le </para><para>boîte de réception est identifié par le <see cref="T:ExchangeWebServices.DistinguishedFolderIdType" /> classe et l’autre dossier identifié par le <see cref="T:ExchangeWebServices.FolderIdType" /> classe. Les deux dossiers analysés pour les nouveaux messages électroniques, copié des éléments, éléments ont été déplacés, modifié des éléments, créé des éléments et les éléments supprimés. L’abonnement expire uniquement si un appel GetEvents n’est pas effectué dans l’intervalle de délai d’expiration.</para><code>static void Subscribe(ExchangeServiceBinding esb)
{
    // Create the request.
    SubscribeType &lt;span class="label"&gt;request&lt;/span&gt; = new SubscribeType();

    // Identify the type of subscription.
    PullSubscriptionRequestType pullSub = new PullSubscriptionRequestType();

    // Identify the folders that are monitored for events.
    DistinguishedFolderIdType inbox = new DistinguishedFolderIdType();
    inbox.Id = DistinguishedFolderIdNameType.inbox;
    FolderIdType customFolder = new FolderIdType();
    customFolder.Id = "AQAlAE1=";
    pullSub.FolderIds = new BaseFolderIdType[2] { inbox, customFolder };

    // Identify the events that are monitored for the subscription.
    pullSub.EventTypes = new NotificationEventTypeType[6]
    {
        NotificationEventTypeType.CopiedEvent,
        NotificationEventTypeType.CreatedEvent,
        NotificationEventTypeType.DeletedEvent,
        NotificationEventTypeType.ModifiedEvent,
        NotificationEventTypeType.MovedEvent,
        NotificationEventTypeType.NewMailEvent
    };

    // Define the time-out period for the subscription (in minutes).
    pullSub.Timeout = 10;

    &lt;span class="label"&gt;request&lt;/span&gt;.Item = pullSub;

    // Send the request and get the response.
    SubscribeResponseType response = esb.Subscribe(&lt;span class="label"&gt;request&lt;/span&gt;);

    ArrayOfResponseMessagesType aormt = response.ResponseMessages;
    ResponseMessageType[] rmta = aormt.Items;

    foreach (ResponseMessageType rmt in rmta)
    {
        // Cast to the appropriate response.
        SubscribeResponseMessageType respMsg = (rmt as SubscribeResponseMessageType);
        
        // Get the new subscription information.
        if (respMsg.ResponseClass == ResponseClassType.Success)
        {
            Console.WriteLine("New subscription: " + respMsg.SubscriptionId);
            Console.WriteLine("Watermark: " + respMsg.Watermark);
        }
    }
}</code></span>
      <span class="sxs-lookup">
        <span data-stu-id="dbe03-103">
          <para>The following code example shows you how to create a pull notification subscription that monitors the Inbox and another folder. The </para>
          <para>Inbox is identified by the <see cref="T:ExchangeWebServices.DistinguishedFolderIdType" /> class and the other folder is identified by the <see cref="T:ExchangeWebServices.FolderIdType" /> class. Both folders are monitored for new e-mail messages, copied items, moved items, modified items, created items, and deleted items. The subscription will time out only if a GetEvents call is not made within the time-out interval.</para>
          <code>static void Subscribe(ExchangeServiceBinding esb)
{
    // Create the request.
    SubscribeType &lt;span class="label"&gt;request&lt;/span&gt; = new SubscribeType();

    // Identify the type of subscription.
    PullSubscriptionRequestType pullSub = new PullSubscriptionRequestType();

    // Identify the folders that are monitored for events.
    DistinguishedFolderIdType inbox = new DistinguishedFolderIdType();
    inbox.Id = DistinguishedFolderIdNameType.inbox;
    FolderIdType customFolder = new FolderIdType();
    customFolder.Id = "AQAlAE1=";
    pullSub.FolderIds = new BaseFolderIdType[2] { inbox, customFolder };

    // Identify the events that are monitored for the subscription.
    pullSub.EventTypes = new NotificationEventTypeType[6]
    {
        NotificationEventTypeType.CopiedEvent,
        NotificationEventTypeType.CreatedEvent,
        NotificationEventTypeType.DeletedEvent,
        NotificationEventTypeType.ModifiedEvent,
        NotificationEventTypeType.MovedEvent,
        NotificationEventTypeType.NewMailEvent
    };

    // Define the time-out period for the subscription (in minutes).
    pullSub.Timeout = 10;

    &lt;span class="label"&gt;request&lt;/span&gt;.Item = pullSub;

    // Send the request and get the response.
    SubscribeResponseType response = esb.Subscribe(&lt;span class="label"&gt;request&lt;/span&gt;);

    ArrayOfResponseMessagesType aormt = response.ResponseMessages;
    ResponseMessageType[] rmta = aormt.Items;

    foreach (ResponseMessageType rmt in rmta)
    {
        // Cast to the appropriate response.
        SubscribeResponseMessageType respMsg = (rmt as SubscribeResponseMessageType);
        
        // Get the new subscription information.
        if (respMsg.ResponseClass == ResponseClassType.Success)
        {
            Console.WriteLine("New subscription: " + respMsg.SubscriptionId);
            Console.WriteLine("Watermark: " + respMsg.Watermark);
        }
    }
}</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SubscribeType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:ExchangeWebServices.SubscribeType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SubscribeType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EWS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dbe03-104">Le <see cref="T:ExchangeWebServices.SubscribeType" /> constructeur initialise une nouvelle instance de le <see cref="T:ExchangeWebServices.SubscribeType" /> classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-104">The <see cref="T:ExchangeWebServices.SubscribeType" /> constructor initializes a new instance of the <see cref="T:ExchangeWebServices.SubscribeType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item" />
      <MemberSignature Language="DocId" Value="P:ExchangeWebServices.SubscribeType.Item" />
      <MemberSignature Language="VB.NET" Value="Public Property Item As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Item { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EWS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("PushSubscriptionRequest", typeof(ExchangeWebServices.PushSubscriptionRequestType))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("PullSubscriptionRequest", typeof(ExchangeWebServices.PullSubscriptionRequestType))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("StreamingSubscriptionRequest", typeof(ExchangeWebServices.StreamingSubscriptionRequestType))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dbe03-105">Le <see cref="P:ExchangeWebServices.SubscribeType.Item" /> propriété obtient ou définit le type d’abonnement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-105">The <see cref="P:ExchangeWebServices.SubscribeType.Item" /> property gets or sets the subscription type.</span>
          </span>
          <span data-ttu-id="dbe03-106">Cette propriété obtient ou définit l’une <see cref="T:ExchangeWebServices.PullSubscriptionRequestType" /> ou <see cref="T:ExchangeWebServices.PushSubscriptionRequestType" /> objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-106">This property gets or sets either a <see cref="T:ExchangeWebServices.PullSubscriptionRequestType" /> or <see cref="T:ExchangeWebServices.PushSubscriptionRequestType" /> object.</span>
          </span>
          <span data-ttu-id="dbe03-107">Cette propriété est requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-107">This property is required.</span>
          </span>
          <span data-ttu-id="dbe03-108">Il s’agit d’une propriété en lecture-écriture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-108">This is a read/write property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dbe03-109">Le <see cref="P:ExchangeWebServices.SubscribeType.Item" /> propriété retourne un <see cref="T:ExchangeWebServices.BaseSubscriptionRequestType" /> object qui représente le type d’abonnement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-109">The <see cref="P:ExchangeWebServices.SubscribeType.Item" /> property returns a <see cref="T:ExchangeWebServices.BaseSubscriptionRequestType" /> object that represents the subscription type.</span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="dbe03-110">
            <para>Le <see cref="P:ExchangeWebServices.SubscribeType.Item" /> propriété peut être définie avec soit un <see cref="T:ExchangeWebServices.PullSubscriptionRequestType" /> ou <see cref="T:ExchangeWebServices.PushSubscriptionRequestType" /> objet. Étendent les deux types de <see cref="T:ExchangeWebServices.BaseSubscriptionRequestType" />, qui est une classe abstraite. Pour plus d’informations sur la raison pour laquelle cette propriété est définie avec ces objets, consultez XML Schema choix élément Proxy artefacts.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dbe03-110">
              <para>The <see cref="P:ExchangeWebServices.SubscribeType.Item" /> property can be set with either a <see cref="T:ExchangeWebServices.PullSubscriptionRequestType" /> or <see cref="T:ExchangeWebServices.PushSubscriptionRequestType" /> object. Both types extend <see cref="T:ExchangeWebServices.BaseSubscriptionRequestType" />, which is an abstract class. For more information about why this property is set with these objects, see XML Schema Choice Element Proxy Artifacts.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>